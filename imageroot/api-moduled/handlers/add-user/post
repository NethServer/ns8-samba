#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import sys
import agent
import json
import subprocess
# Add the path to the samba module
script_dir = os.path.dirname(os.path.abspath(__file__))
pkg_path = os.path.join(script_dir, '../../../pypkg')
sys.path.append(os.path.abspath(pkg_path))
import samba

request = json.load(sys.stdin)
user = request['user']

testexists_cmd = ['podman', 'exec', '-i',
                  'samba-dc', 'samba-tool', 'user', 'show', user]
proc = subprocess.run(testexists_cmd, stdout=subprocess.DEVNULL,
                      stderr=subprocess.DEVNULL, text=True)
if proc.returncode == 0:
    json.dump({"status": "failure", "message": "", "error": [
              {'field': 'user', 'parameter': 'user', 'value': user, 'error': 'user_already_exists'}]}, fp=sys.stdout)
    sys.exit(2)

groups = request.get('groups', [])

# empty string implies a random password is set
password = request.get('password', '')
display_name = request.get('display_name', '')
locked = request.get('locked', False)
mail = request.get('mail', '')
must_change_password = request.get('must_change_password', False) # If 'must_change_password' is True, the user must change their password at next login
no_password_expiration = request.get('no_password_expiration', False) # If 'no_password_expiration' is True, the user's password will not expire

sambatool_cmd = ['podman', 'exec', '-i', 'samba-dc', 'samba-tool']
adduser_cmd = sambatool_cmd + ['user', 'create', user]

if must_change_password:
    adduser_cmd += ['--must-change-at-next-login']

if not password:
    adduser_cmd += ['--random-password']
    inputdata = None
else:
    inputdata = password + "\n" + password + "\n"

subprocess.run(adduser_cmd, input=inputdata,
               stdout=sys.stderr, check=True, text=True)

if locked:
    lock_cmd = sambatool_cmd + ['user', 'disable', user]
    subprocess.run(lock_cmd, stdout=sys.stderr, check=True, text=True)

for group in groups:
    addmember_cmd = sambatool_cmd + ['group', 'addmembers', group, user]
    subprocess.run(addmember_cmd, stdout=sys.stderr, check=True, text=True)

if display_name:
    setname_cmd = ['podman', 'exec', '-i', 'samba-dc',
                   'pdbedit', '-u', user, f'--fullname={display_name}']
    subprocess.run(setname_cmd, stdout=sys.stderr, check=True, text=True)

if mail:
    # retrieve the user's DN, example:
    # dn: CN=Administrator,CN=Users,DC=ad,DC=leader,DC=cluster0,DC=gs,DC=nethserver,DC=net
    getdn_cmd = sambatool_cmd + ['user', 'show', user, '--attributes=dn']
    proc = subprocess.run(getdn_cmd, check=True, capture_output=True, text=True)
    dn = proc.stdout.strip()
    ldbedit_cmd = ['podman', 'exec', '-i', 'samba-dc', 'ldbmodify', '-i', '-H', '/var/lib/samba/private/sam.ldb']
    ldbedit_input = f'{dn}\nchangetype: modify\nreplace: mail\nmail: {mail}\n'
    subprocess.run(ldbedit_cmd, input=ldbedit_input, stdout=sys.stderr, check=True, text=True)

if no_password_expiration:
    dn_str, user_account_control = samba.get_user_account_control(user)
    samba.set_user_account_control(dn_str, user_account_control, no_password_expiration)

json.dump({"status": "success", "message": "user_created"}, fp=sys.stdout)
