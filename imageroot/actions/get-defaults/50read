#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import os
import sys
import agent
import json
import ipaddress as ipm
import subprocess
import cluster.userdomains
import samba

def fqdn2dict(fqdn, domprefix=''):
    if '.' in fqdn:
        shortname, domain = fqdn.split(".", 1)
        nbdomain = domain.upper().split('.', 1)[0]
    else: # the host name is a single word
        shortname = fqdn
        domain = "test"
        nbdomain = "TEST"

    return {
        "hostname": shortname,
        "realm": domprefix + domain,
        "nbdomain": nbdomain,
    }

def file_server_is_allowed(rdb, realm):
    try:
        domain = cluster.userdomains.get_internal_domains(rdb)[realm]
    except KeyError:
        return False

    # Check if any existing provider for the given realm is already a file
    # server:
    for oprov in domain['providers']:
        if oprov["file_server"]:
            return False # No more file server allowed

    return True # File server is still allowed in this realm

request = json.load(sys.stdin)
rdb = agent.redis_connect()

response = {
    "adminuser": "administrator",
    "nbdomain": None,
    "hostname": None,
    "realm": None,
    "can_install_file_server": True, # Always True for new-domain, calculated for join-domain.
    "ipaddress_list": [],
    "nbalias": agent.get_hostname().split('.', 1)[0], # Node short name as server alias name.
}

module_id = os.environ["MODULE_ID"]
shortname = module_id.replace("samba", "dc")

if 'realm' in request:
    fqdn = shortname + '.' + request['realm'].lower()
    response.update(fqdn2dict(fqdn))
else:
    phostname = subprocess.run(["hostname", "-f"], stdout=subprocess.PIPE, text=True)
    fqdn = phostname.stdout.strip().lower()
    response.update(fqdn2dict(fqdn, 'ad.'))

if request['provision'] == 'new-domain':
    response['hostname'] = shortname
elif request['provision'] == 'join-domain':
    response['adminuser'] = "" # do not make assumptions on the admin join credentials
    response['nbdomain'] = ""
    # Calculate the permission for the given Realm.
    response['can_install_file_server'] = file_server_is_allowed(rdb, request['realm'].lower())
elif request['provision'] == 'join-member':
    response['hostname'] = module_id.replace("samba", "fs")
else:
    print(agent.SD_ERR + "Invalid provision value", file=sys.stderr)
    sys.exit(1)

response['ipaddress_list'] = samba.ipaddress_list(
    # List only wg0 if file server is not allowed
    only_wg0=(response['can_install_file_server'] is False),
)

json.dump(response, fp=sys.stdout)
