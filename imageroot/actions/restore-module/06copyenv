#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import sys
import json
import agent
import os
import samba

request = json.load(sys.stdin)

original_environment = request['environment']

for evar in [
        'NBDOMAIN',
        'REALM',
        'SVCUSER',
        'SVCPASS',
    ]:
    agent.set_env(evar, original_environment[evar])

# The "samba-tool domain backup restore" procedure expects a new DC hostname,
# a new one must be provided, now!
def generate_new_dc_name(name):
    """Append a suffix rN to the host name. If such suffix is already
    present, replace it with r(N+1)"""

    try:
        prefix, suffix = name.rsplit("r", 1)
    except ValueError:
        prefix = name
        suffix = '0'

    try:
        suffix = str(int(suffix) + 1)
    except ValueError:
        suffix = suffix + 'r1'

    newname = prefix + 'r' + suffix

    return newname

hname, _ = original_environment['HOSTNAME'].split('.', 1) # short hostname
agent.set_env('HOSTNAME', generate_new_dc_name(hname) + '.' + original_environment['REALM'].lower())

#
# If IPADDRESS is not on this system, replace it with the VPN IP address:
#
ipaddress = original_environment['IPADDRESS']
node_id = os.environ["NODE_ID"]
try:
    samba.ipaddress_check(ipaddress)
except samba.IpNotAvailable:
    with agent.redis_connect(use_replica=True) as rdb:
        ipaddress = rdb.hget(f"node/{node_id}/vpn", "ip_address")
    if not ipaddress:
        raise

agent.set_env('IPADDRESS', ipaddress)
