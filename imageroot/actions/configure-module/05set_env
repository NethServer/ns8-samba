#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import json
import sys
import os
import secrets
import string
import cluster.userdomains
import ipaddress

module_id = os.environ['MODULE_ID']
request = json.load(sys.stdin)
realm = request['realm'].upper()
hostname = request['hostname'].lower()
provision_type = request['provision']

if 'REALM' in os.environ:
    print(agent.SD_ERR + "This module is already configured!", file=sys.stderr)
    sys.exit(1)

with agent.redis_connect() as rdb:
    cluster_network = ipaddress.ip_network(rdb.get('cluster/network'))
    domains = cluster.userdomains.get_internal_domains(rdb)
    kdomain = realm.lower()

    if provision_type == 'join-domain':
        peer_instance = domains[kdomain]['providers'][0]['id']
        penv = rdb.hgetall(f"module/{peer_instance}/environment")
        nbdomain = penv['NBDOMAIN']
        svcpass = penv['SVCPASS']
    elif provision_type == 'new-domain':
        nbdomain = request['nbdomain'].upper()
        # Generate a random password for ldapservice
        alphabet = string.ascii_letters + string.digits + '+-/,.-_^'
        svcpass = ''.join([secrets.choice(alphabet) for i in range(32)])
    else:
        print(agent.SD_ERR + "Bogus provision value! " + provision_type, file=sys.stderr)
        sys.exit(1)

with agent.redis_connect(privileged=True) as prdb:
    prdb.set(f'module/{module_id}/ui_name', hostname)

agent.set_env('PROVISION_TYPE', provision_type)
agent.set_env('NBDOMAIN', nbdomain)
agent.set_env('REALM', realm)
agent.set_env('HOSTNAME', hostname + '.' + realm.lower())
agent.set_env('IPADDRESS', request['ipaddress'])
if ipaddress.ip_address(request['ipaddress']) in cluster_network:
    agent.set_env('PREFIXLEN', str(cluster_network.prefixlen))
agent.set_env('SVCUSER', 'ldapservice')
agent.set_env('SVCPASS', svcpass)
