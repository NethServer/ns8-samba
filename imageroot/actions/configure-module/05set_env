#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import json
import sys
import os
import secrets
import string
import cluster.userdomains
import ipaddress
import socket
import samba
from agent.ldapproxy import Ldapproxy
from agent.ldapclient import Ldapclient

module_id = os.environ['MODULE_ID']
request = json.load(sys.stdin)
realm = request['realm'].upper()
hostname = request['hostname'].lower()
provision_type = request['provision']
server_role = 'dc'

with agent.redis_connect() as rdb:
    cluster_network = ipaddress.ip_network(rdb.get('cluster/network'))
    domains = cluster.userdomains.get_internal_domains(rdb)
    kdomain = realm.lower()

    if provision_type == 'join-domain':
        peer_instance = domains[kdomain]['providers'][0]['id']
        penv = rdb.hgetall(f"module/{peer_instance}/environment")
        nbdomain = penv['NBDOMAIN']
        svcpass = penv['SVCPASS']
    elif provision_type == 'new-domain':
        nbdomain = request['nbdomain'].upper()
        # Generate a random password for ldapservice
        alphabet = string.ascii_letters + string.digits + '+-/,.-_^'
        svcpass = ''.join([secrets.choice(alphabet) for i in range(32)])
    elif provision_type == 'join-member':
        svcpass = '' # not used
        server_role = 'member'
        # Get the first provider of kdomain:
        edomains = cluster.userdomains.get_external_domains(rdb)
        if kdomain in domains:
            peer_address = domains[kdomain]['providers'][0]['host']
        elif kdomain in edomains:
            peer_address = edomains[kdomain]['providers'][0]['host']
        # Get the provider IP address to configure our DNS resolv.conf
        try:
            addrinfo = socket.getaddrinfo(peer_address, 53)
            dns1address = addrinfo[0][4][0]
        except Exception as ex:
            print(agent.SD_ERR, "Address resolution error:", ex, file=sys.stderr)
            json.dump([{"field": "realm", "parameter": "realm", "value": realm, "error": "realm_dc_avail_check_failed"}], fp=sys.stdout)
            agent.set_status('validation-failed')
            sys.exit(6)
        # Look up NBDOMAIN in AD LDAP with the first domain provider:
        domparams = Ldapproxy().get_domain(kdomain)
        ldapconn = Ldapclient.factory(**domparams).ldapconn
        results = ldapconn.search(
            search_base=f'CN=Partitions,CN=Configuration,{domparams["base_dn"]}',
            search_filter=f'(&(objectClass=crossRef)(nCName={domparams["base_dn"]}))',
            attributes=['nETBIOSName'],
        )
        nbdomain = results[2][0]['attributes']['nETBIOSName']
        # Do not trust the realm input parameter value (alias kdomain)
        # because it can be aribitrarily set in external domains. To
        # safely set REALM, retrieve the AD DNS domain name straight from
        # AD LDAP.
        results = ldapconn.search(
            search_base='',
            search_filter='(objectClass=*)',
            search_scope='BASE',
            attributes=['*'],
        )
        realm = results[2][0]['attributes']['defaultNamingContext'][0].upper().removeprefix("DC=").replace(",DC=", ".")
        samba.validate_hostname(request['hostname'], realm.lower(), nameservers=[dns1address])
        agent.set_env('DNS1ADDRESS', dns1address)
    else:
        print(agent.SD_ERR + "Bogus provision value! " + provision_type, file=sys.stderr)
        sys.exit(1)

agent.set_env('SERVER_ROLE', server_role)
agent.set_env('PROVISION_TYPE', provision_type)
agent.set_env('NBDOMAIN', nbdomain)
agent.set_env('NBALIAS', request.get('nbalias', ''))
agent.set_env('REALM', realm) # The AD Kerberos realm or domain name
agent.set_env('DOMAIN', kdomain) # The NS8 domain name
agent.set_env('HOSTNAME', hostname + '.' + realm.lower())
agent.set_env('IPADDRESS', request['ipaddress'])
if ipaddress.ip_address(request['ipaddress']) in cluster_network:
    agent.set_env('PREFIXLEN', str(cluster_network.prefixlen))
else:
    # The instance is bound to a local network IP address: mark it with
    # the "file_server" flag, to enforce our business rules about Samba
    # DCs and file server instances.
    with agent.redis_connect(privileged=True) as prdb:
        prdb.sadd(f"module/{module_id}/flags", "file_server")
agent.set_env('SVCUSER', 'ldapservice')
agent.set_env('SVCPASS', svcpass)
