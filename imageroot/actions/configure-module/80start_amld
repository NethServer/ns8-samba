#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import agent
import agent.tasks
import sys
import os
import string
import secrets
import json

if os.getenv("SERVER_ROLE") == "member" or not os.getenv("IPADDRESS"):
    sys.exit(0)

agent_id = os.environ['AGENT_ID']
agent_install_dir = os.environ['AGENT_INSTALL_DIR']
node_id = int(os.environ['NODE_ID'])
domain = os.getenv('DOMAIN', os.environ['REALM'].lower())
amld_port = os.environ['TCP_PORT']

agent.assert_exp(int(amld_port) > 0) # Ensure TCP port for api-moduled was allocated

alphabet = string.ascii_letters + string.digits + '+-/,.-_^'
amld_secret = ''.join([secrets.choice(alphabet) for i in range(32)])

agent.write_envfile("api-moduled.env", {
    "AMLD_JWT_REALM": domain,
    "AMLD_JWT_SECRET": amld_secret,
    "AMLD_BIND_ADDRESS": ":" + amld_port,
    "AMLD_EXPORT_ENV": "NODE_ID REALM REDIS_ADDRESS"
})

# Configure Traefik to route "/user-admin/<domain>" path requests to
# the api-moduled backend service:
response = agent.tasks.run(
    agent_id=agent.resolve_agent_id('traefik@node'),
    action='set-route',
    data={
        'instance': os.environ['MODULE_ID'] + '-amld',
        'url':  'http://127.0.0.1:' + amld_port,
        'path': '/users-admin/' + domain,
        'http2https': True,
        'strip_prefix': True,
    },
)

# Find the node VPN IP address for users-admin advertising:
ro_rdb = agent.redis_connect()
ip_address = ro_rdb.hget(f'node/{node_id}/vpn', 'ip_address')

# Add the `users-admin` service discovery information, and advertise this
# new service instance:
rdb = agent.redis_connect(privileged=True)
trx = rdb.pipeline()
trx.delete(agent_id + '/srv/http/users-admin')
trx.hset(agent_id + '/srv/http/users-admin', mapping={
    "port": amld_port,
    "url": f"http://{ip_address}:{amld_port}",
    "domain": domain,
    "node": node_id,
})
trx.publish(agent_id + '/event/service-users-admin-changed', json.dumps({
    'domain': domain,
    'node': node_id,
    'key': agent_id + '/srv/http/users-admin',
}))
trx.execute()

# we write api-moduled/public/config.json when the service starts
agent.run_helper("systemctl", "-T", "--user", "enable", "--now", "api-moduled.service")
