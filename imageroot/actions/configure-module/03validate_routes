#!/usr/bin/env python3

#
# Copyright (C) 2021 Nethesis S.r.l.
# http://www.nethesis.it - nethserver@nethesis.it
#
# This script is part of NethServer.
#
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
#
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see COPYING.
#

import agent
import json
import sys
import os
import dns.resolver
import cluster.userdomains
import samba

agent.set_weight(os.path.basename(__file__), 0) # Validation step, no task progress at all

request = json.load(sys.stdin)
realm = request['realm'].lower()
ipaddress = request['ipaddress']
hostname = request['hostname'] # verify the given hostname is not in use
nameservers = []

# Lookup a DC for the given realm
with agent.redis_connect() as rdb:
    domains = cluster.userdomains.get_internal_domains(rdb)
    if realm in domains:
        for provider in domains[realm]['providers']:
            if provider['host'] == request['ipaddress']:
                agent.set_status('validation-failed')
                json.dump([{"parameter": "ipaddress", "field":"ipaddress", "value": ipaddress, "error": "ipaddress_dc_conflict_check_failed"}], fp=sys.stdout)
                sys.exit(5)
            if provider['host']:
                nameservers.append(provider['host'])

if not nameservers:
    # There are no DCs for the given realm. Nothing to do.
    print(f"Active Directory domain {realm}: no changes needed to IP routing configuration.", file=sys.stderr)
else:
    samba.validate_hostname(hostname, realm, nameservers)
