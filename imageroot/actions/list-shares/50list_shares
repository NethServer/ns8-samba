#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import os
import sys
import json
import subprocess
import configparser
import agent

podman_exec = ["podman", "exec", "samba-dc"]

def read_acls(share_name):
    """
    Parse smbcacls output and translate it to our simple ACLs format
    """
    pacls = subprocess.run(
        podman_exec + ["smbcacls", "-P", "//127.0.0.1/" + share_name, ""],
        text=True, stdout=subprocess.PIPE)
    if pacls.returncode != 0:
        return [] # The command has failed

    acls = []
    def subject_index(subject_name):
        """
        Return the index in the acls array of the first ACL with
        subject_name. If the subject is not found return -1
        """
        for idx, acl in enumerate(acls):
            if acl["subject"] == subject_name:
                return idx

        return -1

    for iline in filter(None, pacls.stdout.split("\n")):
        ifields = iline.split(":")
        if ifields[0] != "ACL":
            continue # Consider only ACL entries

        subject_name = ifields[1].removeprefix(os.environ["NBDOMAIN"] + "\\")
        ace_type, _, ace_rights = ifields[2].split("/", 2)

        if ace_type != "ALLOWED":
            rights = "special"
        elif ace_rights == "FULL":
            rights = "full"
        elif ace_rights == "READ":
            rights = "ro"
        elif ace_rights == "RWXD":
            rights = "rw"
        else:
            rights = "special"

        idx = subject_index(subject_name)
        if idx >=0:
            # Multiple entries for the same subject are forced to rights=special
            # We use the index to preserve the ordering returned by smbcacls
            acls[idx]["rights"] = "special"
        else:
            # New subject, assign rights
            acls.append({"subject": subject_name, "rights": rights})

    return acls

list_shares = {
    "shares": []
}

ocfg = configparser.ConfigParser(delimiters=("="))
with subprocess.Popen(podman_exec + ["net", "conf", "list"], stdout=subprocess.PIPE, text=True) as hconf:
    try:
        ocfg.read_file(hconf.stdout, 'samba-registry-conf')
    except Exception as ex:
        print(agent.SD_ERR + "Share configuration parse error", ex, file=sys.stderr)

with subprocess.Popen(podman_exec + ["recycle", "dump_retention"], stdout=subprocess.PIPE) as hretention:
    try:
        recycle_retentions = json.load(hretention.stdout)
    except Exception as ex:
        print(agent.SD_ERR + "Share retention parse error", ex, file=sys.stderr)
        recycle_retentions = {}

psharenames = subprocess.run(podman_exec + ["net", "conf", "listshares"], stdout=subprocess.PIPE, text=True)
for share_name in filter(None, psharenames.stdout.split("\n")):
    if not share_name in ocfg:
        continue

    # Calculate audit settings
    full_audit_success = ocfg[share_name].get("full_audit:success", "none")
    full_audit_failure = ocfg[share_name].get("full_audit:failure", "none")
    enable_audit = full_audit_success != "none" or full_audit_failure != "none"
    log_failed_events = enable_audit and full_audit_failure != "none"
    # Calculate recycle settings
    enable_recycle = ocfg[share_name].get("recycle:repository", "") != ""
    recycle_versions = ocfg[share_name].get("recycle:versions", "yes") != "no"
    recycle_retention = recycle_retentions.get(share_name, 0)

    list_shares['shares'].append({
        "name": share_name,
        "description": ocfg[share_name].get("comment", ""),
        "enable_audit": enable_audit,
        "log_failed_events": log_failed_events,
        "enable_recycle": enable_recycle,
        "recycle_versions": recycle_versions,
        "recycle_retention": recycle_retention,
        "acls": read_acls(share_name),
        "browseable": ocfg[share_name].get("browseable", "yes") != "no",
    })

json.dump(list_shares, fp=sys.stdout)
