#!/usr/bin/env python3

#
# Copyright (C) 2023 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import sys
import json
import agent
import samba

podman_exec = ["podman", "exec", "samba-dc"]

request = json.load(sys.stdin)

samba_add_share = podman_exec + ["samba-add-share"]

if 'description' in request:
    samba_add_share += ["-d", request["description"]]

if 'group' in request:
    samba_add_share += ["-g", request["group"]]

if 'permissions' in request:
    samba_add_share += ["-p", request["permissions"]]

samba_add_share += [request["name"]]

phelper = agent.run_helper(*samba_add_share)

if phelper.returncode == 0:
    pass
elif phelper.returncode == 2:
    agent.set_status('validation-failed')
    json.dump([{'field':'name', 'parameter':'name','value': request['name'], 'error':'share_already_exists'}], fp=sys.stdout)
    sys.exit(2)
elif phelper.returncode == 3:
    agent.set_status('validation-failed')
    json.dump([{'field':'group', 'parameter':'group','value': request['group'], 'error':'group_not_found'}], fp=sys.stdout)
    sys.exit(3)
else:
    phelper.check_returncode()

if 'enable_audit' in request:
    samba.configure_samba_audit(
        request['name'],
        request['enable_audit'],
        request.get('log_failed_events', False))

if 'enable_recycle' in request:
    samba.configure_recycle(
        request['name'],
        request['enable_recycle'],
        request.get('recycle_retention', 0))

if 'browseable' in request:
    samba.configure_browseable(
        request['name'],
        request['browseable'])
