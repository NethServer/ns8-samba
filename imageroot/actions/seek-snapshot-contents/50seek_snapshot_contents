#!/usr/bin/env python3

#
# Copyright (C) 2024 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

import json
import sys
import os
import subprocess
import agent
import hashlib

request = json.load(sys.stdin)

limit_reached = False
contents_limit = request.get("limit", 10)
cache_seed = "%s-%s" % (request['destination'], request['snapshot'])
plocate_cache = hashlib.md5(cache_seed.encode(), usedforsecurity=False).hexdigest()

podman_exec = ["podman", "exec", "samba-dc"]
pcheck = agent.run_helper(*(podman_exec + ["net", "conf", "showshare", request["share"]]), stdout=subprocess.DEVNULL)
if pcheck.returncode != 0:
    agent.set_status('validation-failed')
    json.dump([{'field':'share', 'parameter':'share','value': request['share'], 'error':'share_not_found'}], fp=sys.stdout)
    sys.exit(2)

def locate_share_content():
    global limit_reached, contents, contents_limit
    # Search share paths matching the query:
    plocate_cmd = ['podman', 'exec', 'samba-dc', 'locate-share-content', '-d', f"/var/lib/samba/plocate/{plocate_cache}", '-s', request['share'], "-q", request.get('query', "")]
    with subprocess.Popen(plocate_cmd, stdout=subprocess.PIPE, stderr=sys.stderr, text=True, errors='replace') as vproc:
        contents = []
        while True:
            line = vproc.stdout.readline()
            if not line:
                break
            content = line.rstrip()
            if not content in contents:
                contents.append(content)
            if len(contents) >= contents_limit:
                limit_reached = True
                break
    return vproc.wait(timeout=1)

def purge_plocate_cache():
    # Remove cache dirs older than 8 hours
    purge_script='echo Removing old plocate databases ; find /var/lib/samba/plocate/ -mindepth 1 -maxdepth 1 -type d -cmin +480 -print0 | xargs -r -0 -- rm -rvf'
    agent.run_helper('podman', 'exec', 'samba-dc', 'bash', '-c', purge_script)

if locate_share_content() == 3:
    print(agent.SD_INFO + "DB is not cached, fetch it from the backup snapshot", file=sys.stderr)
    purge_plocate_cache()
    # Cache is missing. Extract the .plocate files from the snapshot and
    # store them under a temporary cache directory:
    podman_args = ["--workdir=/srv"] + agent.agent.get_state_volume_args()
    restic_args = [
        "restore",
        f"{request['snapshot']}:volumes/data/backup",
        "--include=*.plocate",
        f"--target=/srv/volumes/data/plocate/{plocate_cache}"
    ]
    agent.run_restic(agent.redis_connect(), request["destination"], request["repopath"], podman_args, restic_args, stdout=sys.stderr).check_returncode()
    # Repeat the search
    locate2_returncode = locate_share_content()
    if not limit_reached and locate2_returncode != 0:
        print(agent.SD_ERR + f"locate-share-content failed with exit code {locate2_returncode}.", file=sys.stderr)
        sys.exit(1)

json.dump({
    "request": request,
    "contents": contents,
    "limit_reached": limit_reached,
}, fp=sys.stdout)
